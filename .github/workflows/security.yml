name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # 每周一凌晨2点运行

jobs:
  # CodeQL 安全分析
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Install pnpm for JavaScript analysis
      if: matrix.language == 'javascript'
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js for JavaScript analysis
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'

    - name: Install JavaScript dependencies
      if: matrix.language == 'javascript'
      run: pnpm install --frozen-lockfile

    - name: Setup Python for Python analysis
      if: matrix.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'apps/backend/requirements.txt'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        cd apps/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # 前端依赖安全扫描
  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run npm audit
      run: |
        pnpm audit --audit-level=moderate --json > audit-report.json || true
        VULNERABILITIES=$(jq '.vulnerabilities | length' audit-report.json)
        echo "发现 $VULNERABILITIES 个安全漏洞"
        
        if [ "$VULNERABILITIES" -gt 0 ]; then
          echo "🔴 发现安全漏洞，详情："
          pnpm audit --audit-level=moderate
          echo "请运行 'pnpm audit --fix' 修复可自动修复的漏洞"
          exit 1
        else
          echo "✅ 未发现安全漏洞"
        fi

    - name: Upload audit report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-audit-report
        path: apps/frontend/audit-report.json

  # 后端依赖安全扫描
  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'apps/backend/requirements.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Run Safety check
      run: |
        safety check --json > safety-report.json || true
        VULNERABILITIES=$(jq '. | length' safety-report.json)
        echo "发现 $VULNERABILITIES 个已知安全漏洞"
        
        if [ "$VULNERABILITIES" -gt 0 ]; then
          echo "🔴 发现安全漏洞，详情："
          safety check
          exit 1
        else
          echo "✅ 未发现已知安全漏洞"
        fi

    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        ISSUES=$(jq '.results | length' bandit-report.json)
        echo "发现 $ISSUES 个潜在安全问题"
        
        if [ "$ISSUES" -gt 0 ]; then
          echo "🟡 发现潜在安全问题，详情："
          bandit -r . -f txt
          echo "请审查上述问题并酌情修复"
          # Bandit issues 不阻断工作流，只是警告
        else
          echo "✅ 未发现潜在安全问题"
        fi

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-security-reports
        path: |
          apps/backend/safety-report.json
          apps/backend/bandit-report.json

  # 依赖许可证检查
  license-check:
    name: License Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check licenses
      run: |
        npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages > license-report.txt || true
        
        if [ -s license-report.txt ]; then
          echo "✅ 所有依赖的许可证都符合要求"
          cat license-report.txt
        else
          echo "🔴 发现不符合要求的许可证"
          npx license-checker --summary
          exit 1
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.txt 