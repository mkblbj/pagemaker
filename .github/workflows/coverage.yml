name: Coverage Report

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage-report:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'apps/backend/requirements.txt'
        
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        mysql version: '8.4'
        mysql database: 'pagemaker_test'
        mysql root password: 'test_password'
        
    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        cd apps/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov
        
    - name: Run frontend tests with coverage
      run: |
        cd apps/frontend
        pnpm test -- --coverage --reporter=json > coverage-report.json
        
    - name: Run backend tests with coverage
      env:
        DATABASE_URL: mysql://root:test_password@localhost:3306/pagemaker_test
        DJANGO_SETTINGS_MODULE: pagemaker.test_settings
      run: |
        cd apps/backend
        python manage.py migrate --settings=pagemaker.test_settings
        coverage run --source='.' manage.py test --settings=pagemaker.test_settings
        coverage json
        
    - name: Generate coverage summary
      run: |
        # 前端覆盖率
        cd apps/frontend
        FRONTEND_COVERAGE=$(jq '.total.lines.pct' coverage-report.json)
        echo "FRONTEND_COVERAGE=$FRONTEND_COVERAGE" >> $GITHUB_ENV
        
        # 后端覆盖率
        cd ../backend
        BACKEND_COVERAGE=$(jq '.totals.percent_covered' coverage.json)
        echo "BACKEND_COVERAGE=$BACKEND_COVERAGE" >> $GITHUB_ENV
        
        # 计算总体覆盖率
        TOTAL_COVERAGE=$(echo "scale=2; ($FRONTEND_COVERAGE + $BACKEND_COVERAGE) / 2" | bc)
        echo "TOTAL_COVERAGE=$TOTAL_COVERAGE" >> $GITHUB_ENV
        
    - name: Comment coverage on PR
      uses: actions/github-script@v7
      with:
        script: |
          const frontendCoverage = process.env.FRONTEND_COVERAGE;
          const backendCoverage = process.env.BACKEND_COVERAGE;
          const totalCoverage = process.env.TOTAL_COVERAGE;
          
          const coverageEmoji = (coverage) => {
            if (coverage >= 90) return '🟢';
            if (coverage >= 80) return '🟡';
            return '🔴';
          };
          
          const body = `## 📊 代码覆盖率报告
          
          | 组件 | 覆盖率 | 状态 |
          |------|--------|------|
          | 前端 | ${frontendCoverage}% | ${coverageEmoji(frontendCoverage)} |
          | 后端 | ${backendCoverage}% | ${coverageEmoji(backendCoverage)} |
          | 总体 | ${totalCoverage}% | ${coverageEmoji(totalCoverage)} |
          
          ### 质量门禁状态
          ${frontendCoverage >= 80 ? '✅' : '❌'} 前端覆盖率 ${frontendCoverage >= 80 ? '达标' : '未达标'} (要求: ≥80%)
          ${backendCoverage >= 80 ? '✅' : '❌'} 后端覆盖率 ${backendCoverage >= 80 ? '达标' : '未达标'} (要求: ≥80%)
          
          📈 [查看详细覆盖率报告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
          
    - name: Upload combined coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          apps/frontend/coverage/
          apps/backend/htmlcov/
          apps/frontend/coverage-report.json
          apps/backend/coverage.json 