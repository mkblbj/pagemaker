name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read

jobs:
  # 前端部署到Vercel
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    outputs:
      deployment_url: ${{ steps.set-deployment-url.outputs.deployment_url }}
    defaults:
      run:
        working-directory: apps/frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Vercel secrets
      run: |
        echo "🔐 验证 Vercel 部署 secrets..."
        
        # 检查必要的 Vercel secrets 是否存在
        MISSING_SECRETS=()
        
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          MISSING_SECRETS+=("VERCEL_TOKEN")
        fi
        
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
          MISSING_SECRETS+=("VERCEL_ORG_ID")
        fi
        
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          MISSING_SECRETS+=("VERCEL_PROJECT_ID")
        fi
        
        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo "❌ 缺少必要的 Vercel Secrets:"
          printf '%s\n' "${MISSING_SECRETS[@]}"
          echo ""
          echo "请在 GitHub 仓库设置中配置这些 secrets。"
          echo "详细配置指南: docs/github-secrets-setup.md"
          exit 1
        fi
        
        echo "✅ 所有 Vercel secrets 已配置"
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'
        
    - name: Install dependencies (root level)
      run: cd ../.. && pnpm install --frozen-lockfile
      
    - name: Build shared-types package
      run: cd ../../packages/shared-types && pnpm build
      
    - name: Build frontend
      run: pnpm build
      
    - name: Deploy to Vercel
      id: vercel-deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod --env VERCEL_FUNCTIONS_MAX_DURATION=30'
        # 强制部署，避免与 Vercel 自动部署冲突
        github-comment: false
        
    - name: Set deployment URL output
      id: set-deployment-url
      run: |
        # 获取 Vercel 部署 URL
        DEPLOYMENT_URL="${{ steps.vercel-deploy.outputs.preview-url }}"
        
        if [ -n "$DEPLOYMENT_URL" ]; then
          echo "🚀 前端已部署到 Vercel: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        else
          echo "⚠️ 未能获取到 Vercel 部署 URL"
          echo "请检查 Vercel 部署步骤是否成功"
          echo "deployment_url=unknown" >> $GITHUB_OUTPUT
        fi

  # 后端部署到云服务器
  deploy-backend:
    name: Deploy Backend to Server
    runs-on: ubuntu-latest
    needs: deploy-frontend  # 等待前端部署完成
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run pre-deploy checks
      run: |
        chmod +x scripts/pre-deploy-check.sh
        ./scripts/pre-deploy-check.sh
      
    - name: Validate required secrets
      run: |
        echo "🔐 验证必要的部署 secrets..."
        
        # 检查必要的 secrets 是否存在
        MISSING_SECRETS=()
        
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          MISSING_SECRETS+=("SSH_PRIVATE_KEY")
        fi
        
        if [ -z "${{ secrets.SSH_HOST }}" ]; then
          MISSING_SECRETS+=("SSH_HOST")
        fi
        
        if [ -z "${{ secrets.SSH_USERNAME }}" ]; then
          MISSING_SECRETS+=("SSH_USERNAME")
        fi
        
        if [ -z "${{ secrets.SSH_PORT }}" ]; then
          MISSING_SECRETS+=("SSH_PORT")
        fi
        
        if [ -z "${{ secrets.BACKEND_DEPLOY_PATH }}" ]; then
          MISSING_SECRETS+=("BACKEND_DEPLOY_PATH")
        fi
        
        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo "❌ 缺少必要的 GitHub Secrets:"
          printf '%s\n' "${MISSING_SECRETS[@]}"
          echo ""
          echo "请在 GitHub 仓库设置中配置这些 secrets。"
          echo "详细配置指南: docs/github-secrets-setup.md"
          exit 1
        fi
        
        echo "✅ 所有必要的 secrets 已配置"
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: Execute deployment script
      run: |
        ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.BACKEND_DEPLOY_PATH }} && ./scripts/deploy-backend.sh"
        
    - name: Verify deployment
      run: |
        # 等待服务启动
        sleep 10
        
        # 检查部署状态
        HEALTH_CHECK=$(ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "curl -f -s http://localhost:8456/api/v1/health/ || echo 'FAILED'")
        
        if [[ "$HEALTH_CHECK" == "FAILED" ]]; then
          echo "❌ 后端部署验证失败"
          exit 1
        else
          echo "✅ 后端部署验证成功"
        fi
        
    - name: Get deployment logs
      if: always()
      run: |
        ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "tail -50 /var/log/pagemaker-deploy.log" || echo "无法获取部署日志"
        
    - name: Notify deployment result
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ 后端部署成功"
        else
          echo "❌ 后端部署失败"
        fi
        
        echo "**部署详情:**"
        echo "- 提交: ${{ github.sha }}"
        echo "- 分支: ${{ github.ref_name }}"
        echo "- 时间: $(date)"

  # 部署后集成测试
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && needs.deploy-backend.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install pnpm
      uses: pnpm/action-setup@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run smoke tests
      run: |
        # 前端健康检查
        echo "检查前端部署..."
        FRONTEND_URL="${{ needs.deploy-frontend.outputs.deployment_url }}"
        if [ "$FRONTEND_URL" != "unknown" ] && [ -n "$FRONTEND_URL" ]; then
          curl -f "$FRONTEND_URL" || echo "前端健康检查失败: $FRONTEND_URL"
        else
          echo "⚠️ 跳过前端健康检查，未获取到有效的部署 URL"
        fi
        
        # 后端健康检查
        echo "检查后端部署..."
        ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "curl -f http://localhost:8456/api/v1/health/" || echo "后端健康检查失败"
        
    - name: Run basic API tests
      run: |
        # 这里可以添加基础的API测试
        echo "API测试将在后续版本中实现"
        
  # 部署失败时的紧急回滚
  emergency-rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: failure() && needs.deploy-backend.result == 'failure'
    
    steps:
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: Execute emergency rollback
      run: |
        echo "执行紧急回滚..."
        ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
          cd ${{ secrets.BACKEND_DEPLOY_PATH }} && 
          if [ -f scripts/deploy-backend.sh ]; then
            source scripts/deploy-backend.sh
            rollback
          else
            echo '部署脚本不存在，无法自动回滚'
            echo '请手动检查 /root/backups/pagemaker/ 中的备份文件'
            exit 1
          fi
        "
        
    - name: Notify rollback
      run: |
        echo "🔄 紧急回滚已执行"
        echo ""
        echo "由于部署失败，系统已自动回滚到上一个稳定版本。"
        echo ""
        echo "**回滚详情:**"
        echo "- 失败提交: ${{ github.sha }}"
        echo "- 回滚时间: $(date)"
        echo ""
        echo "请检查部署日志并修复问题后重新部署。" 