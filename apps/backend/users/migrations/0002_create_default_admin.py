# Generated by Django 5.1.11 on 2025-07-01 07:39

from django.db import migrations, transaction
from django.contrib.auth.hashers import make_password


def create_default_admin(apps, schema_editor):
    """
    创建默认超级管理员账号
    
    只在没有任何用户时创建，避免重复创建
    账号: admin
    密码: admin123
    """
    # 跳过测试环境
    if schema_editor.connection.alias != 'default':
        return
        
    # 检查是否为测试环境
    from django.conf import settings
    if getattr(settings, 'TESTING', False) or 'test' in settings.DATABASES['default']['NAME'] or settings.DATABASES['default']['NAME'] == ':memory:':
        print("测试环境，跳过创建默认管理员")
        return
    
    User = apps.get_model('auth', 'User')
    UserProfile = apps.get_model('users', 'UserProfile')
    
    # 检查是否已有用户
    if User.objects.exists():
        print("已存在用户，跳过创建默认管理员")
        return
    
    # 使用事务确保数据一致性
    with transaction.atomic():
        # 创建超级管理员
        admin_user = User.objects.create(
            username='admin',
            email='admin@pagemaker.local',
            password=make_password('admin123'),  # 手动哈希密码
            first_name='Super',
            last_name='Admin',
            is_staff=True,
            is_superuser=True,
            is_active=True
        )
        
        # 创建对应的用户配置文件
        UserProfile.objects.create(
            user=admin_user,
            role='admin',
            full_name='Super Admin'
        )
        
        print(f"✅ 成功创建默认超级管理员: {admin_user.username}")
        print(f"   邮箱: {admin_user.email}")
        print(f"   密码: admin123")
        print(f"   角色: admin")


def reverse_create_default_admin(apps, schema_editor):
    """
    回滚操作：删除默认管理员
    """
    User = apps.get_model('auth', 'User')
    
    try:
        admin_user = User.objects.get(username='admin', email='admin@pagemaker.local')
        admin_user.delete()
        print("✅ 成功删除默认管理员")
    except User.DoesNotExist:
        print("默认管理员不存在，无需删除")


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_create_user_profile'),
    ]

    operations = [
        migrations.RunPython(
            create_default_admin,
            reverse_create_default_admin,
            atomic=True
        ),
    ]
